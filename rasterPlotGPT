import pandas as pd
import matplotlib.pyplot as plt

# Load the data from the provided files
bl_data = pd.read_excel('/mnt/data/BlRaster.xlsx')
clon30_data = pd.read_excel('/mnt/data/Clon30Raster.xlsx')
fs_data = pd.read_excel('/mnt/data/FsRaster.xlsx')

# Convert timestamps to minutes for the x-axis
bl_data['timestamp'] /= 60
clon30_data['timestamp'] /= 60
fs_data['timestamp'] /= 60

# Define the fixed durations for each segment in minutes
bl_duration_fixed = 15  # 15 minutes
fs_duration_fixed = 5   # 5 minutes
clon30_duration_fixed = 30  # 30 minutes

# Filter out BL data with timestamps past 15 minutes
bl_data_filtered = bl_data[bl_data['timestamp'] <= bl_duration_fixed]

# Adjust FS data to start at 15 minutes for each unit
fs_data_adjusted = fs_data.copy()
unit_start_times_fs = fs_data_adjusted.groupby('unitID')['timestamp'].min()

for unit_id in unit_start_times_fs.index:
    first_spike_time = unit_start_times_fs[unit_id]
    fs_data_adjusted.loc[fs_data_adjusted['unitID'] == unit_id, 'timestamp'] = \
        15 + (fs_data_adjusted.loc[fs_data_adjusted['unitID'] == unit_id, 'timestamp'] - first_spike_time)

# Adjust Clon30 data to start at 20 minutes for each unit
clon30_data_adjusted = clon30_data.copy()
unit_start_times_clon30 = clon30_data_adjusted.groupby('unitID')['timestamp'].min()

for unit_id in unit_start_times_clon30.index:
    first_spike_time = unit_start_times_clon30[unit_id]
    clon30_data_adjusted.loc[clon30_data_adjusted['unitID'] == unit_id, 'timestamp'] = \
        20 + (clon30_data_adjusted.loc[clon30_data_adjusted['unitID'] == unit_id, 'timestamp'] - first_spike_time)

# Combine the BL, adjusted FS, and adjusted Clon30 data
combined_bl_fs_clon30_data = pd.concat([bl_data_filtered, fs_data_adjusted, clon30_data_adjusted])

# Plotting the combined raster plot for BL, adjusted FS, and adjusted Clon30 data with correct timestamp conversion
plt.figure(figsize=(15, 10))
plt.style.use('dark_background')

# Define the new color map with the specified blue color
color_map_updated = {'D': '#87CEEB', 'L': 'orange', 'X': 'red'}

# Plot each event as a point with different colors based on light cycle
for light_cycle in ['L', 'D', 'X']:
    light_cycle_data = combined_bl_fs_clon30_data[combined_bl_fs_clon30_data['lightCycle'] == light_cycle]
    for unit_id in light_cycle_data['unitID'].unique():
        unit_data = light_cycle_data[light_cycle_data['unitID'] == unit_id]
        plt.scatter(unit_data['timestamp'], [unit_id]*len(unit_data), s=1, color=color_map_updated.get(light_cycle, 'black'))

# Customize plot appearance
plt.yticks([])
plt.xlabel('Time (minutes)', color='white')
plt.ylabel('Unit ID', color='white')
plt.grid(True, color='white')

# Set axes and lettering to white
plt.gca().spines['top'].set_color('white')
plt.gca().spines['bottom'].set_color('white')
plt.gca().spines['left'].set_color('white')
plt.gca().spines['right'].set_color('white')
plt.gca().tick_params(axis='x', colors='white')
plt.gca().tick_params(axis='y', colors='white')

# Ensure x-axis labels are visible and correct, setting limits from 0 to 50 minutes
plt.xticks(color='white')
plt.xlim(0, 50)

# Display the plot
plt.show()
